# 队列中任意两个人 aaa 和 bbb 
# 如果他们是相邻或他们之间没有人比 aaa 或 bbb 高
# 那么他们是可以互相看得见的。写一个程序计算出有多少对人可以互相看见
# [7, 2, 4, 1, 2, 2, 5, 1]
# []


# 如果栈里面的栈顶元素比手上这个元素要小
# 那栈顶元素左边能够看到的最后一个元素就是手上这个了
# 再也看不到别的了
# 这就是1对可以互相看见
# 弹出就好了
# 然后手上这个继续和栈顶去比较

# 对于新加入单调栈的一个元素，我们分三种情况讨论：

# 1、新元素比栈顶小：直接加入栈，ans加1

# 2、新元素与栈顶元素相等：ans加栈中与新元素相等的数的个数，同时若tot不为0，ans还应再加1

# 3、新元素比栈顶大：不断弹出元素，每弹一个ans加一，一直弹到新元素<=栈顶元素，再同情况2进行判断即可。

# 我们想想这个为什么是对的，两个人可以相互看见只有它们间没有人比他们高，对于加入栈的新元素，由于栈是不递增的。如果该元素比栈顶小，我们是从左边考虑，那么该元素仅能看到它的左边的第一个元素，也即是栈顶，栈顶左边的人都比栈顶高，这个新元素看不见。

# 如果新元素和栈顶相等，那么我们就去寻找栈里面有多少和该元素相等的数，找到一个答案就加1，因为相等的元素能够相互看见，对答案的贡献就是1。如果找到最后，tot不为0，那么答案再加1，因为它俩也可以相互看见 比如说

# 栈内有5 2 2，再加入一个2，答案增加3，因为新加入的2 和 5也可以相互看见

# 如果新元素比栈顶大，那么就不断弹出元素，直到新元素<=栈顶元素，弹出一个，答案加1，因为弹出的元素比新元素小，因此新元素可以看见它的左边比它小的元素，有些人可能疑惑元素弹出以后对后面的计数有没有什么影响呢，答案是没有。

# 新元素的身高比弹出的元素的身高大，也就是这些弹出的元素与新元素后面的元素之间不满足能相互看见，新元素的后面任何一个元素都不会看见这些弹出的元素。 到新元素<=栈顶元素时，再考虑新元素是否等于栈顶，这时就回到了情况2